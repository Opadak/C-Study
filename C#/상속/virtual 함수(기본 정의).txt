virtual 
부모 클래스에서 virtual키워드를 사용하여 함수를 만들면, 자식 클래스에서 이 함수를 재정의 
할 수 있도록 허용하겠다는 의미
*** 재정의? -
 특징

 - virtual 이 붙은 함수는 자식 클래스에서 재정의가 가능합니다.

 - 자식 클래스에서는 new 또는 override 키워드가 사용가능하다.

 - override는 재정의를 하겠다는 확장의 의미이고, new 는 기본 클래스를 숨기는 의미이다. 

 - 자식클래스의 함수 시그니쳐(이)가 동일해야 재정의가 가능하다.

 - 자식클래스의 함수는 base 키워드를 사용해 부모 클래스의 함수를 호출 할 수 있습니다.

 - abstract 와는 달리 자식클래스에서 구현은 선택이다. (구현 안하면 부모의 함수 사용)

 - static, abstract, private, override 키워드와는 사용이 불가능하다.

virtual -> override 
base를 사용하여 부모의 매소드를 오버라이드 해줌.


public class Monster
{
    public virtual void hit()
    {
        Console.WriteLine("Monster hit");
    }
}
 
public class Orc : Monster
{
    public override void hit()
    {
        Console.WriteLine("Orc hit");
    }
}
 
public class Elf : Monster
{
    public new void hit()
    {
        Console.WriteLine("Elf hit");
    }
}
 
public class Wolf : Monster
{
    public void hit()
    {
        Console.WriteLine("Wolf hit");
    }
}


class Program
 {
     static void Main(string[] args)
     {
         Monster monster1 = new Monster();
         Orc monster2 = new Orc();
         Elf monster3 = new Elf();
         Wolf monster4 = new Wolf();
 
         monster1.hit();
         monster2.hit();
         monster3.hit();
         monster4.hit();
 
         Monster monster5 = new Orc();
         Monster monster6 = new Elf();
         Monster monster7 = new Wolf();
 
 
         Console.WriteLine("////////////////////");
         monster5.hit();
         monster6.hit();
         monster7.hit();
 
     }
 }

결과 
Monster hit
Orc hit
Elf hit
Wolf hit
///////////////////////
Orc hit
Monster hit
Monster hit


monster 1~4 는 그대로 잘 출력되네요. 사실 각 클래스에 자기 자신을 인스턴스로 담으면 virtual의 의미가 전혀 없습니다. 
( 이렇게 쓸거면 재정의가 필요없죠)

하지만 monster 5~7은 결과가 다르죠.

ovrride를 한 Orc만 제대로 재정의되어 자신의 hit를 출력하고 있고, 나머지는 상위 클래스의 hit를 출력합니다.

여기서 new 키워드의 기본 클래스를 숨긴다는 의미도 알 수 있죠.
 상위 클래스 변수에 담기면 하위 클래스가 아닌 상위 클래스의 함수를 호출한다는 것입니다. 
( new 키워드를 사용하지 않은 경우, 즉 Wolf의 경우에는 new와 동일한 동작을 합니다.)



그럼 만약에 상위 클래스가 virtual 키워드를 쓰지 않았다면?

virtual 함수를 쓰지않으면 하위 클래스에서는 override를 쓰지 못합니다. 
당연히 monster 6~7과 동일하게 동작합니다. 



결국 virtual과 override를 사용하여 재정의하는 이유는 
상위 클래스 변수에 하위 클래스 인스턴스를 담을 때, 하위 클래스의 함수를 호출하고 싶기 때문이죠.
-> 왜 override를 써야 하는지.

(Monster monster5 = new Orc();)





