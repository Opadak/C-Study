
virtual 함수의 활용



 그럼 이런 재정의는 언제 활용을 하는걸까요

 상위 클래스 변수에 하위 클래스 인스턴스를 담아야 할 경우는 언제일까요

 위의 hit 함수를 생각해보죠.

 모든 몬스터가 Monster라는 하나의 클래스로 만들어지면 좋겠지만, 각자의 특징에 따라 Monster 하위 클래스가 만들어질 수 있습니다. 
그리고 Player가 몬스터를 때렸을때, 해당 몬스터의 hit를 호출한다고 칩시다.

virtual 함수를 쓰지 않는다면 어떻게 될까요? 
?
1
2
3
4
5
6
7
8
9
10
11
12
void attack(Orc monster)
 {
     monster.hit();
 }
 void attack(Elf monster)
 {
     monster.hit();
 }
 void attack(Wolf monster)
 {
     monster.hit();
 }
 헉... 모든 해당 몬스터 즉, orc, elf, wolf 별로 hit 함수를 오버로딩하여 별도로 호출해야 합니다. 
 왜냐하면... virtual을 사용하지 않으면 저렇게 해야만 해당 몬스터의 hit를 호출할 수 있으니까요.
 ( 사용하는 입장에서 Orc가 hit를 override를 했을지, 안했을지 모르잖아요?)

만약 virtual 함수를 사용하고, 다른 하위 클래스에서 hit함수를 override했다면?
?
1
2
3
4
void attack(Monster monster)
{
    monster.hit();
}
이거 하나면 됩니다.



monster.hit() 가 호출될 때 Monster 변수에 담긴 인스턴트별로 재정의 되어있는 hit 함수를 호출해 줄테니까요.

몬스터 종류가 무수히 많아졌을 때, 마냥 몬스터별로 함수를 오버로딩해서 작성할 수는 없습니다. 반드시 virtual이 필요해지죠.





* 사실 위와 같은 방식은 abstract 또는 interface로도 가능은 하죠. 

 하지만 abstract, interface와는 달리 virtual은 선택적으로 재정의가 가능하다는 점과 virtual 함수를 가진 상위 클래스도
 인스턴스 생성이 가능하다는 점이 있습니다.

 솔직히 위의 Hit함수만 보면 어차피 모든 클래스가 구현을 해야한다면 abstract로 만드는게 맞지 않냐고 할 수 있습니다. 
Hit만 있다면 맞는 말이죠. 그리고 Monster라는 하나의 그룹을 정의하는 거라면 abstract가 맞습니다. 
하지만 Orc 중에서 엘리트 Orc는 Hit시 반격을 하고 싶다면?모든 Orc의 함수는 동일하게 상속받아 행동하고, 
Move만 재정의 해야 한다면, virtual이 필요해지게 되죠. Orc도 하나의 인스턴스로써 동작해야하고, 
엘리트 Orc는 hit를 재정의해서 만들어져야 하니까요. 즉, 특정 개체로부터 특정 함수만을 선택적으로 재정의하고, 
그 외에는 그대로 상속 해야할 경우인거죠.

 결국 각자의 특징에 알맞게 사용해야겠죠. 
예를 들어 abstract는 하위 클래스가 반드시 구현해야하는 것을 명시하거나 하나로 묶을 때, 
interface는 class에 한정되지 않고, 범용적으로 사용할 때 또는 디자인 정의가 필요할 때, 
virtual은 일부 함수에 대해 선택적으로 재정의가 필요할 때.

 









