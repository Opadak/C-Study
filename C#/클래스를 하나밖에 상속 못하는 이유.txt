"죽음의 다이아몬드"라는 문제 때문이다.
죽음의 다이아몬드란? 
=> 하나의 할아버지 클래스를 두 개의 파생 클래스가 상속하고, 이 두개의 파생클래스를 다시 하나의 자식 클래스가 상속
하는 것을 말한다. 

이러면 받아야 하는 메소드가 중복되는 경우가 생긴다. 

그런데 인터페이스는 왜 상속이 가능할 까? 

=> 인터페이스는 클래스와 달리 내용이 아닌 외형을 자식(파생)클래스에 물러주기때문이다. 


여러 클래스로 부터 구현을 물려받고 싶다면? 
=> 포함(Containment)라는 기법을 사용하면됨. 

예)
MyVehicle(){

Car car = new Car();
Plane plane = new Plane();

public void Fly(); {plane.Ride();}
public void Run(); car.Ride();}

}

